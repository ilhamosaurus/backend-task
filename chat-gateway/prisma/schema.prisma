// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  username         String         @unique
  email            String         @unique
  password         String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  profile          Profile[]
  MessagesSent     Message[]      @relation("Sender")
  MessagesReceived Message[]      @relation("Receiver")
  ClientToUser     ClientToUser[]

  @@map("users")
}

model ClientToUser {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  clientId String @unique
  username String
  user     User   @relation(fields: [username], references: [username], onDelete: Cascade)

  @@map("ClientToUsers")
}

model Profile {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  gender    Gender
  birthday  DateTime
  photoKey  String?
  photoUrl  String?
  horoscope String?
  zodiac    String?
  height    Int?
  weight    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  interest  String[]

  @@map("profiles")
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sender    String
  receiver  String
  from      User     @relation("Sender", fields: [sender], references: [username], onDelete: Cascade)
  to        User     @relation("Receiver", fields: [receiver], references: [username], onDelete: Cascade)

  @@map("messages")
}

enum Gender {
  MALE
  FEMALE
}
